#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create faculty profiles tables."""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import mysql, postgresql

# revision identifiers, used by Alembic.
revision = "fb0de62682b0"
down_revision = "ae3a6b3833a6"
branch_labels = ()
depends_on = "9848d0149abd"


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "faculty_profiles_metadata",
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(name="active"), nullable=True),
        sa.Column("bucket_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.ForeignKeyConstraint(
            ["bucket_id"],
            ["files_bucket.id"],
            name=op.f("fk_faculty_profiles_metadata_bucket_id_files_bucket"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_faculty_profiles_metadata")),
    )
    op.create_index(
        op.f("ix_faculty_profiles_metadata_bucket_id"),
        "faculty_profiles_metadata",
        ["bucket_id"],
        unique=False,
    )
    op.create_table(
        "faculty_profiles_files",
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "key",
            sa.Text().with_variant(mysql.VARCHAR(length=255), "mysql"),
            nullable=False,
        ),
        sa.Column("record_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "object_version_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["object_version_id"],
            ["files_object.version_id"],
            name=op.f("fk_faculty_profiles_files_object_version_id_files_object"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["faculty_profiles_metadata.id"],
            name=op.f("fk_faculty_profiles_files_record_id_faculty_profiles_metadata"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_faculty_profiles_files")),
    )
    op.create_index(
        op.f("ix_faculty_profiles_files_object_version_id"),
        "faculty_profiles_files",
        ["object_version_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_faculty_profiles_files_record_id"),
        "faculty_profiles_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_faculty_profiles_files_record_id_key",
        "faculty_profiles_files",
        ["record_id", "key"],
        unique=True,
    )
    op.drop_index("ix_uq_partial_files_object_is_head", table_name="files_object")
    op.alter_column(
        "files_objecttags",
        "key",
        existing_type=sa.TEXT(),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "records_metadata_version",
        "json",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=sa.JSON()
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
        .with_variant(
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
        )
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
        existing_nullable=True,
        autoincrement=False,
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "records_metadata_version",
        "json",
        existing_type=sa.JSON()
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
        .with_variant(
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
        )
        .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "files_objecttags",
        "key",
        existing_type=sa.String(length=255),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.create_index(
        "ix_uq_partial_files_object_is_head",
        "files_object",
        ["bucket_id", "key"],
        unique=False,
    )
    op.drop_index(
        "uidx_faculty_profiles_files_record_id_key", table_name="faculty_profiles_files"
    )
    op.drop_index(
        op.f("ix_faculty_profiles_files_record_id"), table_name="faculty_profiles_files"
    )
    op.drop_index(
        op.f("ix_faculty_profiles_files_object_version_id"),
        table_name="faculty_profiles_files",
    )
    op.drop_table("faculty_profiles_files")
    op.drop_index(
        op.f("ix_faculty_profiles_metadata_bucket_id"),
        table_name="faculty_profiles_metadata",
    )
    op.drop_table("faculty_profiles_metadata")
    # ### end Alembic commands ###
